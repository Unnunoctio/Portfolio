---
import { db, eq, inArray, Skill, ProjectSkill, Project } from 'astro:db';
import type { Skill as SkillType } from '../types';
import { skillStore, updatedSkills } from '../store/skills';
import { minutesDifference } from '../utils/time';
import SkillBadge from './SkillBadge.astro';
import { getProject, updateSkillsProject } from '../store/project';

interface Props {
  title: string;
}

const { title } = Astro.props;
const { path } = Astro.params;

let skills: SkillType[] = []
if (path === undefined) {
  if (skillStore.get().skills.length === 0 || minutesDifference(skillStore.get().last_update, new Date(), 10)) {
    const skillsDB: SkillType[] = await db.select().from(Skill)
    updatedSkills(skillsDB)
  }
  skills = skillStore.get().skills
} else {
  let project = getProject(path as string);
  if (project !== undefined) {
    if (project.skills.length === 0 || minutesDifference(project.skills_update, new Date(), 10)) {
      const skills_id = (await db.select().from(ProjectSkill).where(eq(ProjectSkill.project_id, project.project_id))).map((s) => s.skill_id)
      if(skills_id.length > 0) {
        const skillsDB = await db.select().from(Skill).where(inArray(Skill.skill_id, skills_id))
        updateSkillsProject(path, skillsDB)
        project = getProject(path)
      }
    }
    skills = project?.skills as SkillType[]
  }
}

skills.sort((a, b) => a.order - b.order)
---

<div class="mt-16 p-4 w-full max-w-skill-box bg-bg-skills rounded-2xl shadow-skills"> 
  <h2 class="text-2xl">{title}</h2>
  <ul class="flex flex-wrap gap-3 mt-4">
    {skills.length > 0 && skills.map(skill => (
      <li><SkillBadge {...skill} /></li>
    ))}
    {skills.length === 0 && <li><SkillBadge skill_id={0} order={1} lang='Sin Habilidades' color='#8B5CF6' /></li>}
  </ul>
</div>

